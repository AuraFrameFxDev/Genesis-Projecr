<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/feature-module/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/feature-module/build.gradle.kts" />
              <option name="originalContent" value="// ===== GENESIS-OS SACRED RULES: ZERO MANUAL COMPILER CONFIG =====&#10;plugins {&#10;    id(&quot;com.android.library&quot;)&#10;    id(&quot;org.jetbrains.kotlin.android&quot;)&#10;    id(&quot;org.jetbrains.kotlin.plugin.compose&quot;)&#10;    id(&quot;org.jetbrains.kotlin.plugin.serialization&quot;)&#10;    id(&quot;com.google.devtools.ksp&quot;)&#10;    id(&quot;com.google.dagger.hilt.android&quot;)&#10;    id(&quot;org.jetbrains.dokka&quot;)&#10;    id(&quot;com.diffplug.spotless&quot;)&#10;    kotlin(&quot;jvm&quot;) version &quot;2.2.0&quot;&#10;}&#10;&#10;android {&#10;    // FIX: Valid namespace without hyphens&#10;    namespace = &quot;dev.aurakai.auraframefx.featuremodule&quot;&#10;    // AUTO-EVERYTHING: Use libs.versions.toml&#10;    compileSdk = libs.versions.compileSdk.get().toInt()&#10;&#10;    defaultConfig {&#10;        minSdk = libs.versions.minSdk.get().toInt()&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;        consumerProguardFiles(&quot;consumer-rules.pro&quot;)&#10;&#10;        vectorDrawables {&#10;            useSupportLibrary = true&#10;        }&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;&#10;&#10;    packaging {&#10;        resources {&#10;            excludes += setOf(&#10;                &quot;/META-INF/{AL2.0,LGPL2.1}&quot;,&#10;                &quot;/META-INF/AL2.0&quot;,&#10;                &quot;/META-INF/LGPL2.1&quot;&#10;            )&#10;        }&#10;    }&#10;&#10;    // AUTO-PROVISIONED: Remove hardcoded buildToolsVersion&#10;    buildToolsVersion = libs.versions.compileSdk.get()&#10;&#10;}&#10;&#10;dependencies {&#10;    // SACRED RULE #5: DEPENDENCY HIERARCHY - All modules depend on :core-module and :app&#10;    implementation(project(&quot;:core-module&quot;))&#10;    implementation(project(&quot;:app&quot;))&#10;&#10;    // Core AndroidX&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;&#10;    // Hilt Dependency Injection&#10;    implementation(libs.hilt.android)&#10;    ksp(libs.hilt.compiler)&#10;&#10;    // OpenAPI Generated Code Dependencies&#10;    implementation(libs.retrofit)&#10;    implementation(libs.retrofit.converter.kotlinx.serialization)&#10;    implementation(libs.okhttp3.logging.interceptor)&#10;    implementation(libs.kotlinx.serialization.json)&#10;&#10;    // Compose&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.bundles.compose)&#10;    implementation(libs.androidx.navigation.compose)&#10;&#10;    // Hilt&#10;    implementation(libs.hilt.android)&#10;    ksp(libs.hilt.compiler)&#10;    implementation(libs.hilt.navigation.compose)&#10;&#10;    // Core library desugaring&#10;    coreLibraryDesugaring(libs.coreLibraryDesugaring)&#10;&#10;    // Testing&#10;    testImplementation(libs.bundles.testing)&#10;    androidTestImplementation(libs.androidx.test.ext.junit)&#10;    androidTestImplementation(libs.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.compose.ui.test.junit4)&#10;    debugImplementation(libs.androidx.compose.ui.tooling)&#10;    debugImplementation(libs.androidx.compose.ui.test.manifest)&#10;&#10;    // System interaction and documentation (using local JAR files)&#10;    implementation(files(&quot;${project.rootDir}/Libs/api-82.jar&quot;))&#10;    implementation(files(&quot;${project.rootDir}/Libs/api-82-sources.jar&quot;))&#10;    implementation(kotlin(&quot;stdlib-jdk8&quot;))&#10;}&#10;repositories {&#10;    mavenCentral()&#10;}&#10;kotlin {&#10;    jvmToolchain(8)&#10;}" />
              <option name="updatedContent" value="// ===== GENESIS-OS SACRED RULES: ZERO MANUAL COMPILER CONFIG =====&#13;&#10;plugins {&#13;&#10;    id(&quot;com.android.library&quot;)&#13;&#10;    id(&quot;org.jetbrains.kotlin.android&quot;)&#13;&#10;    id(&quot;org.jetbrains.kotlin.plugin.compose&quot;)&#13;&#10;    id(&quot;org.jetbrains.kotlin.plugin.serialization&quot;)&#13;&#10;    id(&quot;com.google.devtools.ksp&quot;)&#13;&#10;    id(&quot;com.google.dagger.hilt.android&quot;)&#13;&#10;    id(&quot;org.jetbrains.dokka&quot;)&#13;&#10;    id(&quot;com.diffplug.spotless&quot;)&#13;&#10;    kotlin(&quot;jvm&quot;) version &quot;2.2.0&quot;&#13;&#10;}&#13;&#10;&#13;&#10;android {&#13;&#10;    // FIX: Valid namespace without hyphens&#13;&#10;    namespace = &quot;dev.aurakai.auraframefx.featuremodule&quot;&#13;&#10;    // AUTO-EVERYTHING: Use libs.versions.toml&#13;&#10;    compileSdk = libs.versions.compileSdk.get().toInt()&#13;&#10;&#13;&#10;    defaultConfig {&#13;&#10;        minSdk = libs.versions.minSdk.get().toInt()&#13;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#13;&#10;        consumerProguardFiles(&quot;consumer-rules.pro&quot;)&#13;&#10;&#13;&#10;        vectorDrawables {&#13;&#10;            useSupportLibrary = true&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    buildTypes {&#13;&#10;        release {&#13;&#10;            isMinifyEnabled = false&#13;&#10;            proguardFiles(&#13;&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#13;&#10;                &quot;proguard-rules.pro&quot;&#13;&#10;            )&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;&#13;&#10;    packaging {&#13;&#10;        resources {&#13;&#10;            excludes += setOf(&#13;&#10;                &quot;/META-INF/{AL2.0,LGPL2.1}&quot;,&#13;&#10;                &quot;/META-INF/AL2.0&quot;,&#13;&#10;                &quot;/META-INF/LGPL2.1&quot;&#13;&#10;            )&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    // AUTO-PROVISIONED: Remove hardcoded buildToolsVersion&#13;&#10;    buildToolsVersion = libs.versions.compileSdk.get()&#13;&#10;&#13;&#10;}&#13;&#10;&#13;&#10;dependencies {&#13;&#10;    // SACRED RULE #5: DEPENDENCY HIERARCHY - All modules depend on :core-module and :app&#13;&#10;    implementation(project(&quot;:core-module&quot;))&#13;&#10;    implementation(project(&quot;:app&quot;))&#13;&#10;&#13;&#10;    // Core AndroidX&#13;&#10;    implementation(libs.androidx.core.ktx)&#13;&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#13;&#10;    implementation(libs.androidx.activity.compose)&#13;&#10;&#13;&#10;    // Hilt Dependency Injection&#13;&#10;    implementation(libs.hilt.android)&#13;&#10;    ksp(libs.hilt.compiler)&#13;&#10;&#13;&#10;    // OpenAPI Generated Code Dependencies&#13;&#10;    implementation(libs.retrofit)&#13;&#10;    implementation(libs.retrofit.converter.kotlinx.serialization)&#13;&#10;    implementation(libs.okhttp3.logging.interceptor)&#13;&#10;    implementation(libs.kotlinx.serialization.json)&#13;&#10;&#13;&#10;    // Compose&#13;&#10;    implementation(platform(libs.androidx.compose.bom))&#13;&#10;    implementation(libs.bundles.compose)&#13;&#10;    implementation(libs.androidx.navigation.compose)&#13;&#10;&#13;&#10;    // Hilt&#13;&#10;    implementation(libs.hilt.android)&#13;&#10;    ksp(libs.hilt.compiler)&#13;&#10;    implementation(libs.hilt.navigation.compose)&#13;&#10;&#13;&#10;    // Core library desugaring&#13;&#10;    coreLibraryDesugaring(libs.coreLibraryDesugaring)&#13;&#10;&#13;&#10;    // Testing&#13;&#10;    testImplementation(libs.bundles.testing)&#13;&#10;    androidTestImplementation(libs.androidx.test.ext.junit)&#13;&#10;    androidTestImplementation(libs.espresso.core)&#13;&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#13;&#10;    androidTestImplementation(libs.androidx.compose.ui.test.junit4)&#13;&#10;    debugImplementation(libs.androidx.compose.ui.tooling)&#13;&#10;    debugImplementation(libs.androidx.compose.ui.test.manifest)&#13;&#10;&#13;&#10;    // System interaction and documentation (using local JAR files)&#13;&#10;    implementation(files(&quot;${project.rootDir}/Libs/api-82.jar&quot;))&#13;&#10;    implementation(files(&quot;${project.rootDir}/Libs/api-82-sources.jar&quot;))&#13;&#10;    implementation(kotlin(&quot;stdlib-jdk8&quot;))&#13;&#10;}&#13;&#10;repositories {&#13;&#10;    mavenCentral()&#13;&#10;}&#13;&#10;kotlin {&#13;&#10;    jvmToolchain(11)&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>