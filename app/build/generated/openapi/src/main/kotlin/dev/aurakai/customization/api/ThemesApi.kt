/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package dev.aurakai.customization.api

import dev.aurakai.customization.model.ErrorResponse
import dev.aurakai.customization.model.Theme
import dev.aurakai.customization.model.ThemeApplyRequest

import dev.aurakai.customization.api.infrastructure.*
import io.ktor.client.HttpClient
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import kotlinx.serialization.json.Json
import io.ktor.http.ParametersBuilder
import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

open class ThemesApi : ApiClient {

    constructor(
        baseUrl: String = ApiClient.BASE_URL,
        httpClientEngine: HttpClientEngine? = null,
        httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
        jsonSerializer: Json = ApiClient.JSON_DEFAULT
    ) : super(baseUrl = baseUrl, httpClientEngine = httpClientEngine, httpClientConfig = httpClientConfig, jsonBlock = jsonSerializer)

    constructor(
        baseUrl: String,
        httpClient: HttpClient
    ): super(baseUrl = baseUrl, httpClient = httpClient)

    /**
     * Apply a theme
     * 
     * @param themeApplyRequest 
     * @return void
     */
    open suspend fun themeApplyPut(themeApplyRequest: ThemeApplyRequest): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = themeApplyRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/theme/apply",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Get available themes
     * 
     * @return kotlin.collections.List<Theme>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun themesGet(): HttpResponse<kotlin.collections.List<Theme>> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/themes",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<ThemesGetResponse>().map { value }
    }

    @Serializable(ThemesGetResponse.Companion::class)
    private class ThemesGetResponse(val value: List<Theme>) {
        companion object : KSerializer<ThemesGetResponse> {
            private val serializer: KSerializer<List<Theme>> = serializer<List<Theme>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: ThemesGetResponse) = serializer.serialize(encoder, value.value)
            override fun deserialize(decoder: Decoder) = ThemesGetResponse(serializer.deserialize(decoder))
        }
    }

}
