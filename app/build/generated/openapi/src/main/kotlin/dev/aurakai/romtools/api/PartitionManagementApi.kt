/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package dev.aurakai.romtools.api

import dev.aurakai.romtools.model.MountRequest
import dev.aurakai.romtools.model.PartitionInfo

import dev.aurakai.romtools.api.infrastructure.*
import io.ktor.client.HttpClient
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import kotlinx.serialization.json.Json
import io.ktor.http.ParametersBuilder
import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

open class PartitionManagementApi : ApiClient {

    constructor(
        baseUrl: String = ApiClient.BASE_URL,
        httpClientEngine: HttpClientEngine? = null,
        httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
        jsonSerializer: Json = ApiClient.JSON_DEFAULT
    ) : super(baseUrl = baseUrl, httpClientEngine = httpClientEngine, httpClientConfig = httpClientConfig, jsonBlock = jsonSerializer)

    constructor(
        baseUrl: String,
        httpClient: HttpClient
    ): super(baseUrl = baseUrl, httpClient = httpClient)

    /**
     * List system partitions
     * Get information about all system partitions
     * @return kotlin.collections.List<PartitionInfo>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun listPartitions(): HttpResponse<kotlin.collections.List<PartitionInfo>> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/partitions",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<ListPartitionsResponse>().map { value }
    }

    @Serializable(ListPartitionsResponse.Companion::class)
    private class ListPartitionsResponse(val value: List<PartitionInfo>) {
        companion object : KSerializer<ListPartitionsResponse> {
            private val serializer: KSerializer<List<PartitionInfo>> = serializer<List<PartitionInfo>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: ListPartitionsResponse) = serializer.serialize(encoder, value.value)
            override fun deserialize(decoder: Decoder) = ListPartitionsResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Mount partition
     * Mount a specific partition (requires root)
     * @param partitionName Name of the partition to mount
     * @param mountRequest 
     * @return void
     */
    open suspend fun mountPartition(partitionName: kotlin.String, mountRequest: MountRequest): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = mountRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/partitions/{partitionName}/mount".replace("{" + "partitionName" + "}", "$partitionName"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Unmount partition
     * Unmount a specific partition (requires root)
     * @param partitionName Name of the partition to unmount
     * @return void
     */
    open suspend fun unmountPartition(partitionName: kotlin.String): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/partitions/{partitionName}/unmount".replace("{" + "partitionName" + "}", "$partitionName"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


}
