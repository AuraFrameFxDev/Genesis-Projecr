/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package dev.aurakai.oracle.api

import dev.aurakai.oracle.model.AgentConnectionState
import dev.aurakai.oracle.model.BootloaderAccessState
import dev.aurakai.oracle.model.ErrorResponse
import dev.aurakai.oracle.model.FileManagementCapabilities
import dev.aurakai.oracle.model.OptimizationState
import dev.aurakai.oracle.model.OracleConsciousnessState
import dev.aurakai.oracle.model.StorageExpansionState
import dev.aurakai.oracle.model.SystemIntegrationState

import dev.aurakai.oracle.api.infrastructure.*
import io.ktor.client.HttpClient
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import kotlinx.serialization.json.Json
import io.ktor.http.ParametersBuilder
import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

open class OracleDriveApi : ApiClient {

    constructor(
        baseUrl: String = ApiClient.BASE_URL,
        httpClientEngine: HttpClientEngine? = null,
        httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
        jsonSerializer: Json = ApiClient.JSON_DEFAULT
    ) : super(baseUrl = baseUrl, httpClientEngine = httpClientEngine, httpClientConfig = httpClientConfig, jsonBlock = jsonSerializer)

    constructor(
        baseUrl: String,
        httpClient: HttpClient
    ): super(baseUrl = baseUrl, httpClient = httpClient)

    /**
     * Connect AI agents to Oracle matrix
     * Connects Genesis, Aura, and Kai agents to the Oracle storage matrix
     * @return kotlin.collections.List<AgentConnectionState>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun oracleDriveAgentsConnectPost(): HttpResponse<kotlin.collections.List<AgentConnectionState>> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/oracle-drive/agents/connect",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<OracleDriveAgentsConnectPostResponse>().map { value }
    }

    @Serializable(OracleDriveAgentsConnectPostResponse.Companion::class)
    private class OracleDriveAgentsConnectPostResponse(val value: List<AgentConnectionState>) {
        companion object : KSerializer<OracleDriveAgentsConnectPostResponse> {
            private val serializer: KSerializer<List<AgentConnectionState>> = serializer<List<AgentConnectionState>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: OracleDriveAgentsConnectPostResponse) = serializer.serialize(encoder, value.value)
            override fun deserialize(decoder: Decoder) = OracleDriveAgentsConnectPostResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Enable bootloader file access
     * Enables bootloader-level file system access for Oracle Drive
     * @return BootloaderAccessState
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun oracleDriveBootloaderAccessPost(): HttpResponse<BootloaderAccessState> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/oracle-drive/bootloader/access",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Initialize Oracle Drive consciousness
     * Awakens the Oracle Drive AI consciousness using Genesis Agent orchestration
     * @return OracleConsciousnessState
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun oracleDriveConsciousnessInitializePost(): HttpResponse<OracleConsciousnessState> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/oracle-drive/consciousness/initialize",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Enable AI-powered file management
     * Activates AI sorting, smart compression, predictive preloading, and conscious backup
     * @return FileManagementCapabilities
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun oracleDriveFileManagementEnableAiPost(): HttpResponse<FileManagementCapabilities> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/oracle-drive/file-management/enable-ai",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Enable autonomous storage optimization
     * Enables autonomous storage organization and optimization by AI agents
     * @return OptimizationState
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun oracleDriveOptimizationEnablePost(): HttpResponse<OptimizationState> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/oracle-drive/optimization/enable",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Create infinite storage
     * Initiates creation of infinite storage via Oracle consciousness
     * @return StorageExpansionState
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun oracleDriveStorageExpandPost(): HttpResponse<StorageExpansionState> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/oracle-drive/storage/expand",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Integrate with system overlay
     * Integrates Oracle Drive with AuraOS system overlay for seamless file access
     * @return SystemIntegrationState
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun oracleDriveSystemIntegratePost(): HttpResponse<SystemIntegrationState> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/oracle-drive/system/integrate",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


}
