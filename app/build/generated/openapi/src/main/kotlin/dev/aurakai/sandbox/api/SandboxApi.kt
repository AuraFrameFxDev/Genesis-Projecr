/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package dev.aurakai.sandbox.api

import dev.aurakai.sandbox.model.ComponentTestRequest
import dev.aurakai.sandbox.model.ComponentTestResult
import dev.aurakai.sandbox.model.ErrorResponse
import dev.aurakai.sandbox.model.SandboxComponent

import dev.aurakai.sandbox.api.infrastructure.*
import io.ktor.client.HttpClient
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import kotlinx.serialization.json.Json
import io.ktor.http.ParametersBuilder
import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

open class SandboxApi : ApiClient {

    constructor(
        baseUrl: String = ApiClient.BASE_URL,
        httpClientEngine: HttpClientEngine? = null,
        httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
        jsonSerializer: Json = ApiClient.JSON_DEFAULT
    ) : super(baseUrl = baseUrl, httpClientEngine = httpClientEngine, httpClientConfig = httpClientConfig, jsonBlock = jsonSerializer)

    constructor(
        baseUrl: String,
        httpClient: HttpClient
    ): super(baseUrl = baseUrl, httpClient = httpClient)

    /**
     * Execute component test
     * Run tests on a specific UI component in the sandbox environment
     * @param componentId ID of the component to test
     * @param componentTestRequest 
     * @return ComponentTestResult
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun sandboxComponentsComponentIdTestPost(componentId: kotlin.String, componentTestRequest: ComponentTestRequest): HttpResponse<ComponentTestResult> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = componentTestRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/sandbox/components/{componentId}/test".replace("{" + "componentId" + "}", "$componentId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * List available UI components for testing
     * Retrieve list of UI components available in the sandbox environment
     * @return kotlin.collections.List<SandboxComponent>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun sandboxComponentsGet(): HttpResponse<kotlin.collections.List<SandboxComponent>> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/sandbox/components",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<SandboxComponentsGetResponse>().map { value }
    }

    @Serializable(SandboxComponentsGetResponse.Companion::class)
    private class SandboxComponentsGetResponse(val value: List<SandboxComponent>) {
        companion object : KSerializer<SandboxComponentsGetResponse> {
            private val serializer: KSerializer<List<SandboxComponent>> = serializer<List<SandboxComponent>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: SandboxComponentsGetResponse) = serializer.serialize(encoder, value.value)
            override fun deserialize(decoder: Decoder) = SandboxComponentsGetResponse(serializer.deserialize(decoder))
        }
    }

}
