/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package dev.aurakai.aura.api

import dev.aurakai.aura.model.AuthLoginPost200Response
import dev.aurakai.aura.model.AuthRegisterPostRequest
import dev.aurakai.aura.model.Error
import dev.aurakai.aura.model.User

import dev.aurakai.aura.api.infrastructure.*
import io.ktor.client.HttpClient
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import kotlinx.serialization.json.Json
import io.ktor.http.ParametersBuilder
import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

open class AuthenticationApi : ApiClient {

    constructor(
        baseUrl: String = ApiClient.BASE_URL,
        httpClientEngine: HttpClientEngine? = null,
        httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
        jsonSerializer: Json = ApiClient.JSON_DEFAULT
    ) : super(baseUrl = baseUrl, httpClientEngine = httpClientEngine, httpClientConfig = httpClientConfig, jsonBlock = jsonSerializer)

    constructor(
        baseUrl: String,
        httpClient: HttpClient
    ): super(baseUrl = baseUrl, httpClient = httpClient)

    /**
     * Login user
     * 
     * @param username 
     * @param password 
     * @param grantType  (optional, default to "password")
     * @return AuthLoginPost200Response
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun authLoginPost(username: kotlin.String, password: kotlin.String, grantType: kotlin.String? = "password"): HttpResponse<AuthLoginPost200Response> {

        val localVariableAuthNames = listOf<String>("OAuth2")

        val localVariableBody = 
            ParametersBuilder().also {
                username?.apply { it.append("username", username.toString()) }
                password?.apply { it.append("password", password.toString()) }
                grantType?.apply { it.append("grant_type", grantType.toString()) }
            }.build()

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/auth/login",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return urlEncodedFormRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Register a new user
     * 
     * @param authRegisterPostRequest 
     * @return User
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun authRegisterPost(authRegisterPostRequest: AuthRegisterPostRequest): HttpResponse<User> {

        val localVariableAuthNames = listOf<String>("OAuth2")

        val localVariableBody = authRegisterPostRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/auth/register",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



}
